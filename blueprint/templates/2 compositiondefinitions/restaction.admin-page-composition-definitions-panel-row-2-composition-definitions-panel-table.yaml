apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  name: admin-page-composition-definitions-panel-row-2-composition-definitions-panel-table
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - filter: '[.namespaces.items[] | .metadata.name]'
    name: namespaces
    path: /api/v1/namespaces
    continueOnError: true
  - name: allCompositionDefinitions
    continueOnError: true
    dependsOn:
      iterator: .[]
      name: namespaces
    path: ${ "/apis/core.krateo.io/v1alpha1/namespaces/" + (.) + "/compositiondefinitions"}
  filter: >
    {
      list: (
        (
          if (.allCompositionDefinitions | type) == "array" then
            [.allCompositionDefinitions[]?.items[]?]
          elif (.allCompositionDefinitions | type) == "object" then
            [.allCompositionDefinitions.items[]?]
          else
            []
          end
        | map({
            key: .metadata.uid,
            name: .metadata.name,
            namespace: .metadata.namespace,
            date: .metadata.creationTimestamp,
            status: (
              if (.status? and .status.conditions?) then
                (.status.conditions[]? | select(.type == "Ready") | "Ready: " + .status)?
              else
                "Status not available"
              end
            )
          })
        | sort_by(.date)
        | reverse
        | map([
            { valueKey: "key", kind: "jsonSchemaType", type: "string", stringValue: .key },
            { valueKey: "name", kind: "jsonSchemaType", type: "string", stringValue: .name },
            { valueKey: "namespace", kind: "jsonSchemaType", type: "string", stringValue: .namespace },
            { valueKey: "date", kind: "jsonSchemaType", type: "string", stringValue: .date },
            { valueKey: "status", kind: "jsonSchemaType", type: "string", stringValue: .status }
          ])
        )
      )
    }
