apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  annotations:
    krateo.io/verbose: "true"
  name: admin-page-finops-panel-row-1-list-notebooks-and-buttons
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: getNamespaces
    path: "/api/v1/namespaces"
    filter: "(.getNamespaces.items? // []) | map(.metadata.name)"
    continueOnError: true
    errorKey: getNamespacesError
  - name: getNotebooks
    dependsOn:
      iterator: .[]
      name: getNamespaces
    path: ${ "/apis/finops.krateo.io/v1/namespaces/" + (.) + "/notebooks"}
    continueOnError: true
    filter: "(.getNotebooks.items? // []) | map({name: .metadata.name, namespace: .metadata.namespace})"
  - name: getButtons
    continueOnError: true
    errorKey: getButtonsError
    dependsOn: 
      name: getNamespaces
      iterator: .getNamespaces
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.) + "/buttons" }
    filter: "(.getButtons.items? // []) | map({name: .metadata.name, namespace: .metadata.namespace})"
  filter: >
    (.getButtons // []) as $b
    | (.getNotebooks // []) as $p
    | {
        buttonsToCreate: (
          $p
          | map(select(
              (.name, .namespace) as $ppair
              | all($b[]; (.name, .namespace) != $ppair)
            ))
          | unique_by(.name, .namespace)
        ),
        buttonsToDelete: (
          $b
          | map(select(
              (.name, .namespace) as $bpair
              | all($p[]; (.name, .namespace) != $bpair)
            ))
          | unique_by(.name, .namespace)
        )
      }
---
apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  annotations:
    krateo.io/verbose: "true"
  name: admin-page-finops-panel-row-1-list-notebooks-and-panels
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: getNamespaces
    path: "/api/v1/namespaces"
    filter: "(.getNamespaces.items? // []) | map(.metadata.name)"
    continueOnError: true
    errorKey: getNamespacesError
  - name: getNotebooks
    dependsOn:
      iterator: .[]
      name: getNamespaces
    path: ${ "/apis/finops.krateo.io/v1/namespaces/" + (.) + "/notebooks"}
    continueOnError: true
    filter: "(.getNotebooks.items? // []) | map({name: .metadata.name, namespace: .metadata.namespace})"
  - name: getPanels
    continueOnError: true
    errorKey: getPanelsError
    dependsOn: 
      name: getNamespaces
      iterator: .getNamespaces
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.) + "/panels" }
    filter: "(.getPanels.items? // []) | map({name: .metadata.name, namespace: .metadata.namespace})"
  filter: >
    (.getPanels // []) as $b
    | (.getNotebooks // []) as $p
    | {
        panelsToCreate: (
          $p
          | map(select(
              (.name, .namespace) as $ppair
              | all($b[]; (.name, .namespace) != $ppair)
            ))
          | unique_by(.name, .namespace)
        ),
        panelsToDelete: (
          $b
          | map(select(
              (.name, .namespace) as $bpair
              | all($p[]; (.name, .namespace) != $bpair)
            ))
          | unique_by(.name, .namespace)
        )
      }
---
apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  annotations:
    krateo.io/verbose: "true"
  name: admin-page-finops-panel-row-1-list-notebooks-and-paragraphs
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: getNamespaces
    path: "/api/v1/namespaces"
    filter: "(.getNamespaces.items? // []) | map(.metadata.name)"
    continueOnError: true
    errorKey: getNamespacesError
  - name: getNotebooks
    dependsOn:
      iterator: .[]
      name: getNamespaces
    path: ${ "/apis/finops.krateo.io/v1/namespaces/" + (.) + "/notebooks"}
    continueOnError: true
    filter: "(.getNotebooks.items? // []) | map({name: .metadata.name, namespace: .metadata.namespace})"
  - name: getParagraphs
    continueOnError: true
    errorKey: getParagraphsError
    dependsOn: 
      name: getNamespaces
      iterator: .getNamespaces
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.) + "/markdowns" }
    filter: "(.getParagraphs.items? // []) | map({name: .metadata.name, namespace: .metadata.namespace})"
  filter: >
    (.getParagraphs // []) as $b
    | (.getNotebooks // []) as $p
    | {
        paragraphsToCreate: (
          $p
          | map(select(
              (.name, .namespace) as $ppair
              | all($b[]; (.name, .namespace) != $ppair)
            ))
          | unique_by(.name, .namespace)
        ),
        paragraphsToDelete: (
          $b
          | map(select(
              (.name, .namespace) as $bpair
              | all($p[]; (.name, .namespace) != $bpair)
            ))
          | unique_by(.name, .namespace)
        )
      }
---
apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  annotations:
    krateo.io/verbose: "true"
  name: admin-page-finops-panel-row-1-list-notebooks-and-restactions
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: getNamespaces
    path: "/api/v1/namespaces"
    filter: "(.getNamespaces.items? // []) | map(.metadata.name)"
    continueOnError: true
    errorKey: getNamespacesError
  - name: getNotebooks
    dependsOn:
      iterator: .[]
      name: getNamespaces
    path: ${ "/apis/finops.krateo.io/v1/namespaces/" + (.) + "/notebooks"}
    continueOnError: true
    filter: "(.getNotebooks.items? // []) | map({name: .metadata.name, namespace: .metadata.namespace})"
  - name: getRestActions
    continueOnError: true
    errorKey: getRestActionsError
    dependsOn: 
      name: getNamespaces
      iterator: .getNamespaces
    path: ${ "/apis/templates.krateo.io/v1/namespaces/" + (.) + "/restactions" }
    filter: "(.getRestActions.items? // []) | map({name: .metadata.name, namespace: .metadata.namespace})"
  filter: >
    (.getRestActions // []) as $b
    | (.getNotebooks // []) as $p
    | {
        restActionsToCreate: (
          $p
          | map(select(
              (.name, .namespace) as $ppair
              | all($b[]; (.name, .namespace) != $ppair)
            ))
          | unique_by(.name, .namespace)
        ),
        restActionsToDelete: (
          $b
          | map(select(
              (.name, .namespace) as $bpair
              | all($p[]; (.name, .namespace) != $bpair)
            ))
          | unique_by(.name, .namespace)
        )
      }
---
apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  annotations:
    krateo.io/verbose: "true"
  name: admin-page-finops-panel-row-1-list-notebooks-and-create
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: listNotebooksAndButtons
    path: "/call?apiVersion=templates.krateo.io/v1&resource=restactions&name=admin-page-finops-panel-row-1-list-notebooks-and-buttons&namespace={{ .Release.Namespace }}"
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace: {{ .Release.Namespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: listNotebooksAndButtonsError
    exportJwt: true
    filter: ".listNotebooksAndButtons.status? // {}"
  - name: listNotebooksAndPanels
    path: "/call?apiVersion=templates.krateo.io/v1&resource=restactions&name=admin-page-finops-panel-row-1-list-notebooks-and-panels&namespace={{ .Release.Namespace }}"
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace:  {{ .Release.Namespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: listNotebooksAndPanelsError
    exportJwt: true
    filter: ".listNotebooksAndPanels.status? // {}"
  - name: listNotebooksAndParagraphs
    path: "/call?apiVersion=templates.krateo.io/v1&resource=restactions&name=admin-page-finops-panel-row-1-list-notebooks-and-paragraphs&namespace={{ .Release.Namespace }}"
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace:  {{ .Release.Namespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: listNotebooksAndParagraphsError
    exportJwt: true
    filter: ".listNotebooksAndParagraphs.status? // {}"
  - name: listNotebooksAndRestActions
    path: "/call?apiVersion=templates.krateo.io/v1&resource=restactions&name=admin-page-finops-panel-row-1-list-notebooks-and-restactions&namespace={{ .Release.Namespace }}"
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace:  {{ .Release.Namespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: listNotebooksAndRestActionsError
    exportJwt: true
    filter: ".listNotebooksAndRestActions.status? // {}"
  - name: createButton
    continueOnError: true
    errorKey: createButtonError
    dependsOn: 
      name: listNotebooksAndButtons
      iterator: .listNotebooksAndButtons.buttonsToCreate
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.namespace ) + "/buttons/" }
    verb: POST
    headers:
      - "Content-Type: application/json"
    payload: |
      ${
        {
          "kind": "Button",
          "apiVersion": "widgets.templates.krateo.io/v1beta1",
          "metadata": {
            "name": .name,
            "namespace": .namespace,
            "labels": {
              "krateo.io/portal": "button-for-table"
            }
          },
          "spec": {
            "widgetData": {
              "label": "Code",
              "icon": "fa-solid fa-list",
              "size": "middle",
              "type": "primary",
              "clickActionId": "open",
              "actions": {
                "openDrawer": [
                  {
                    "id": "open",
                    "resourceRefId": "panel",
                    "type": "openDrawer",
                    "size": "large"
                  }
                ]
              }
            },
            "resourcesRefs": {
              "items": [
                {
                  "id": "panel",
                  "apiVersion": "widgets.templates.krateo.io/v1beta1",
                  "resource": "panels",
                  "name": .name,
                  "namespace": .namespace,
                  "verb": "GET"
                }
              ]
            }
          }
        }
      }
  - name: createPanels
    continueOnError: true
    errorKey: createPanelsError
    dependsOn: 
      name: listNotebooksAndPanels
      iterator: .listNotebooksAndPanels.panelsToCreate
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.namespace ) + "/panels/" }
    verb: POST
    headers:
      - "Content-Type: application/json"
    payload: |
      ${
        {
          "kind": "Panel",
          "apiVersion": "widgets.templates.krateo.io/v1beta1",
          "metadata": {
            "name": .name,
            "namespace": .namespace,
            "labels": {
              "krateo.io/portal": "panel-for-table"
            }
          },
          "spec": {
            "widgetData": {
              "actions": {},
              "title": "Notebook Code: " + .name,
              "items": [
                {
                  "resourceRefId": "paragraph"
                }
              ]
            },
            "resourcesRefs": {
              "items": [
                {
                  "id": "paragraph",
                  "apiVersion": "widgets.templates.krateo.io/v1beta1",
                  "resource": "markdowns",
                  "name": .name,
                  "namespace": .namespace,
                  "verb": "GET"
                }
              ]
            }
          }
        }
      }
  - name: createParagraphs
    continueOnError: true
    errorKey: createParagraphError
    dependsOn: 
      name: listNotebooksAndParagraphs
      iterator: .listNotebooksAndParagraphs.paragraphsToCreate
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.namespace ) + "/markdowns/" }
    verb: POST
    headers:
      - "Content-Type: application/json"
    payload: |
      ${
        {
          "kind": "Markdown",
          "apiVersion": "widgets.templates.krateo.io/v1beta1",
          "metadata": {
            "name": .name,
            "namespace": .namespace,
            "labels": {
              "krateo.io/portal": "paragraph-for-table"
            }
          },
          "spec": {
            "widgetData": {
              "markdown": ""
            },
            "widgetDataTemplate": [
              {
                "forPath": "markdown",
                "expression": "${ \"```python\n\" + .notebook.code }"
              }
            ],
            "apiRef": {
              "name": .name,
              "namespace": .namespace
            }
          }
        }
      }
  - name: createRestActions
    continueOnError: true
    errorKey: createRestActionsError
    dependsOn: 
      name: listNotebooksAndRestActions
      iterator: .listNotebooksAndRestActions.restActionsToCreate
    path: ${ "/apis/templates.krateo.io/v1/namespaces/" + (.namespace ) + "/restactions/" }
    verb: POST
    headers:
      - "Content-Type: application/json"
    payload: |
      ${
        {
          "kind": "RESTAction",
          "apiVersion": "templates.krateo.io/v1",
          "metadata": {
            "name": .name,
            "namespace": .namespace,
            "labels": {
              "krateo.io/portal": "restaction-for-table"
            }
          },
          "spec": {
            "api": [
              {
                "name": "notebook",
                "path": "/compute/" + .name + "/info",
                "verb": "GET",
                "endpointRef": {
                  "name": "finops-database-handler-endpoint",
                  "namespace": "{{ .Values.global.krateoNamespace }}"
                }
              }
            ]
          }
        }
      }
---
apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  name: admin-page-finops-panel-row-1-notebooks-panel-table
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: namespaces
    path: "/api/v1/namespaces"
    filter: "[.namespaces.items[] | .metadata.name]"
    continueOnError: true
  - name: notebooks
    dependsOn:
      iterator: .[]
      name: namespaces
    path: ${ "/apis/finops.krateo.io/v1/namespaces/" + (.) + "/notebooks"}
    continueOnError: true
  - name: createAll
    path: "/call?apiVersion=templates.krateo.io/v1&resource=restactions&name=admin-page-finops-panel-row-1-list-notebooks-and-create&namespace={{ .Release.Namespace }}"
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace: {{ .Release.Namespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: createAll
    exportJwt: true
    dependsOn: 
      name: namespaces
  filter: >
    {
      notebooks: (
        (
          if (.notebooks | type) == "array" then
            [.notebooks[]?.items[]?]
          elif (.notebooks | type) == "object" then
            [.notebooks.items[]?]
          else
            []
          end
        )
      ),
      list: (
        (
          if (.notebooks | type) == "array" then
            [.notebooks[]?.items[]?]
          elif (.notebooks | type) == "object" then
            [.notebooks.items[]?]
          else
            []
          end
        | map({
            name: .metadata.name,
            namespace: .metadata.namespace,
            status: (
              if (.status.conditions | type) == "array" then
                ( [.status.conditions[]? | select(.type == "Ready") | "Ready: " + .status ] | first? ) // 
                ( [.status.conditions[]? | select(.type == "Synced") | "Synced: " + .status] | first? // "Status not available" )
              else
                "Status not available"
              end
            )
          })
        | sort_by(.name)
        | map([
            {
              valueKey: "name",
              kind: "jsonSchemaType",
              type: "string",
              stringValue: .name
            },
            {
              valueKey: "namespace",
              kind: "jsonSchemaType",
              type: "string",
              stringValue: .namespace
            },
            {
              valueKey: "status",
              kind: "jsonSchemaType",
              type: "string",
              stringValue: .status
            },
            {
              valueKey: "view",
              kind: "widget",
              resourceRefId: .name
            }
          ])
        )
      )
    }
