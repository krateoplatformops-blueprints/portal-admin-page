apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  annotations:
    krateo.io/verbose: "true"
  name: admin-page-krateo-panel-row-2-list-pods-and-buttons
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: getNamespaces
    path: "/api/v1/namespaces"
    filter: "[.getNamespaces.items[] | .metadata.name]"
    continueOnError: true
    errorKey: getNamespacesError
  - name: getPods
    continueOnError: true
    errorKey: getPodsError
    dependsOn: 
      name: getNamespaces
      iterator: .getNamespaces
    path: ${ "/api/v1/namespaces/" + (.) + "/pods" }
    filter: "[.getPods.items[] | {name: .metadata.name, namespace: .metadata.namespace} ]"
  - name: getButtons
    continueOnError: true
    errorKey: getButtonsError
    dependsOn: 
      name: getNamespaces
      iterator: .getNamespaces
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.) + "/buttons" }
    filter: "[.getButtons.items[] | {name: .metadata.name, namespace: .metadata.namespace} ]"
  filter: >
    .getButtons as $b
    | .getPods as $p
    | {
        buttonsToCreate: (
          $p
          | map(select(
              (.name, .namespace) as $ppair
              | all($b[]; (.name, .namespace) != $ppair)
            ))
          | unique_by(.name, .namespace)
        ),
        buttonsToDelete: (
          $b
          | map(select(
              (.name, .namespace) as $bpair
              | all($p[]; (.name, .namespace) != $bpair)
            ))
          | unique_by(.name, .namespace)
        )
      }
---
apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  annotations:
    krateo.io/verbose: "true"
  name: admin-page-krateo-panel-row-2-list-pods-and-panels
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: getNamespaces
    path: "/api/v1/namespaces"
    filter: "[.getNamespaces.items[] | .metadata.name]"
    continueOnError: true
    errorKey: getNamespacesError
  - name: getPods
    continueOnError: true
    errorKey: getPodsError
    dependsOn: 
      name: getNamespaces
      iterator: .getNamespaces
    path: ${ "/api/v1/namespaces/" + (.) + "/pods" }
    filter: "[.getPods.items[] | {name: .metadata.name, namespace: .metadata.namespace} ]"
  - name: getPanels
    continueOnError: true
    errorKey: getPanelsError
    dependsOn: 
      name: getNamespaces
      iterator: .getNamespaces
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.) + "/panels" }
    filter: "[.getPanels.items[] | {name: .metadata.name, namespace: .metadata.namespace} ]"
  filter: >
    .getPanels as $b
    | .getPods as $p
    | {
        panelsToCreate: (
          $p
          | map(select(
              (.name, .namespace) as $ppair
              | all($b[]; (.name, .namespace) != $ppair)
            ))
          | unique_by(.name, .namespace)
        ),
        panelsToDelete: (
          $b
          | map(select(
              (.name, .namespace) as $bpair
              | all($p[]; (.name, .namespace) != $bpair)
            ))
          | unique_by(.name, .namespace)
        )
      }
---
apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  annotations:
    krateo.io/verbose: "true"
  name: admin-page-krateo-panel-row-2-list-pods-and-paragraphs
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: getNamespaces
    path: "/api/v1/namespaces"
    filter: "[.getNamespaces.items[] | .metadata.name]"
    continueOnError: true
    errorKey: getNamespacesError
  - name: getPods
    continueOnError: true
    errorKey: getPodsError
    dependsOn: 
      name: getNamespaces
      iterator: .getNamespaces
    path: ${ "/api/v1/namespaces/" + (.) + "/pods" }
    filter: "[.getPods.items[] | {name: .metadata.name, namespace: .metadata.namespace} ]"
  - name: getParagraphs
    continueOnError: true
    errorKey: getParagraphsError
    dependsOn: 
      name: getNamespaces
      iterator: .getNamespaces
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.) + "/markdowns" }
    filter: "[.getParagraphs.items[] | {name: .metadata.name, namespace: .metadata.namespace} ]"
  filter: >
    .getParagraphs as $b
    | .getPods as $p
    | {
        paragraphsToCreate: (
          $p
          | map(select(
              (.name, .namespace) as $ppair
              | all($b[]; (.name, .namespace) != $ppair)
            ))
          | unique_by(.name, .namespace)
        ),
        paragraphsToDelete: (
          $b
          | map(select(
              (.name, .namespace) as $bpair
              | all($p[]; (.name, .namespace) != $bpair)
            ))
          | unique_by(.name, .namespace)
        )
      }
---
apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  annotations:
    krateo.io/verbose: "true"
  name: admin-page-krateo-panel-row-2-list-pods-and-restactions
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: getNamespaces
    path: "/api/v1/namespaces"
    filter: "[.getNamespaces.items[] | .metadata.name]"
    continueOnError: true
    errorKey: getNamespacesError
  - name: getPods
    continueOnError: true
    errorKey: getPodsError
    dependsOn: 
      name: getNamespaces
      iterator: .getNamespaces
    path: ${ "/api/v1/namespaces/" + (.) + "/pods" }
    filter: "[.getPods.items[] | {name: .metadata.name, namespace: .metadata.namespace} ]"
  - name: getRestActions
    continueOnError: true
    errorKey: getRestActionsError
    dependsOn: 
      name: getNamespaces
      iterator: .getNamespaces
    path: ${ "/apis/templates.krateo.io/v1/namespaces/" + (.) + "/restactions" }
    filter: "[.getRestActions.items[] | {name: .metadata.name, namespace: .metadata.namespace} ]"
  filter: >
    .getRestActions as $b
    | .getPods as $p
    | {
        restActionsToCreate: (
          $p
          | map(select(
              (.name, .namespace) as $ppair
              | all($b[]; (.name, .namespace) != $ppair)
            ))
          | unique_by(.name, .namespace)
        ),
        restActionsToDelete: (
          $b
          | map(select(
              (.name, .namespace) as $bpair
              | all($p[]; (.name, .namespace) != $bpair)
            ))
          | unique_by(.name, .namespace)
        )
      }
---
apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  annotations:
    krateo.io/verbose: "true"
  name: admin-page-krateo-panel-row-2-list-pods-and-create
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: listPodsAndButtons
    path: "/call?apiVersion=templates.krateo.io/v1&resource=restactions&name=admin-page-krateo-panel-row-2-list-pods-and-buttons&namespace={{ .Release.Namespace }}"
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace: {{ .Release.Namespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: listPodsAndButtonsError
    exportJwt: true
    filter: ".listPodsAndButtons.status"
  - name: listPodsAndPanels
    path: "/call?apiVersion=templates.krateo.io/v1&resource=restactions&name=admin-page-krateo-panel-row-2-list-pods-and-panels&namespace={{ .Release.Namespace }}"
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace:  {{ .Release.Namespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: listPodsAndPanelsError
    exportJwt: true
    filter: ".listPodsAndPanels.status"
  - name: listPodsAndParagraphs
    path: "/call?apiVersion=templates.krateo.io/v1&resource=restactions&name=admin-page-krateo-panel-row-2-list-pods-and-paragraphs&namespace={{ .Release.Namespace }}"
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace:  {{ .Release.Namespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: listPodsAndParagraphsError
    exportJwt: true
    filter: ".listPodsAndParagraphs.status"
  - name: listPodsAndRestActions
    path: "/call?apiVersion=templates.krateo.io/v1&resource=restactions&name=admin-page-krateo-panel-row-2-list-pods-and-restactions&namespace={{ .Release.Namespace }}"
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace:  {{ .Release.Namespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: listPodsAndRestActionsError
    exportJwt: true
    filter: ".listPodsAndRestActions.status"
  - name: createButton
    continueOnError: true
    errorKey: createButtonError
    dependsOn: 
      name: listPodsAndButtons
      iterator: .listPodsAndButtons.buttonsToCreate
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.namespace ) + "/buttons/" }
    verb: POST
    headers:
      - "Content-Type: application/json"
    payload: |
      ${
        {
          "kind": "Button",
          "apiVersion": "widgets.templates.krateo.io/v1beta1",
          "metadata": {
            "name": .name,
            "namespace": .namespace,
            "labels": {
              "krateo.io/portal": "button-for-table"
            }
          },
          "spec": {
            "widgetData": {
              "label": "Logs",
              "icon": "fa-solid fa-list",
              "size": "middle",
              "type": "primary",
              "clickActionId": "open",
              "actions": {
                "openDrawer": [
                  {
                    "id": "open",
                    "resourceRefId": "panel",
                    "type": "openDrawer",
                    "size": "large"
                  }
                ]
              }
            },
            "resourcesRefs": {
              "items": [
                {
                  "id": "panel",
                  "apiVersion": "widgets.templates.krateo.io/v1beta1",
                  "resource": "panels",
                  "name": .name,
                  "namespace": .namespace,
                  "verb": "GET"
                }
              ]
            }
          }
        }
      }
  - name: createPanels
    continueOnError: true
    errorKey: createPanelsError
    dependsOn: 
      name: listPodsAndPanels
      iterator: .listPodsAndPanels.panelsToCreate
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.namespace ) + "/panels/" }
    verb: POST
    headers:
      - "Content-Type: application/json"
    payload: |
      ${
        {
          "kind": "Panel",
          "apiVersion": "widgets.templates.krateo.io/v1beta1",
          "metadata": {
            "name": .name,
            "namespace": .namespace,
            "labels": {
              "krateo.io/portal": "panel-for-table"
            }
          },
          "spec": {
            "widgetData": {
              "actions": {},
              "title": "Logs for: " + .name,
              "items": [
                {
                  "resourceRefId": "paragraph"
                }
              ]
            },
            "resourcesRefs": {
              "items": [
                {
                  "id": "paragraph",
                  "apiVersion": "widgets.templates.krateo.io/v1beta1",
                  "resource": "markdowns",
                  "name": .name,
                  "namespace": .namespace,
                  "verb": "GET"
                }
              ]
            }
          }
        }
      }
  - name: createParagraphs
    continueOnError: true
    errorKey: createParagraphError
    dependsOn: 
      name: listPodsAndParagraphs
      iterator: .listPodsAndParagraphs.paragraphsToCreate
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.namespace ) + "/markdowns/" }
    verb: POST
    headers:
      - "Content-Type: application/json"
    payload: |
      ${
        {
          "kind": "Markdown",
          "apiVersion": "widgets.templates.krateo.io/v1beta1",
          "metadata": {
            "name": .name,
            "namespace": .namespace,
            "labels": {
              "krateo.io/portal": "paragraph-for-table"
            }
          },
          "spec": {
            "widgetData": {
              "markdown": ""
            },
            "widgetDataTemplate": [
              {
                "forPath": "markdown",
                "expression": "${ .text.logs }"
              }
            ],
            "apiRef": {
              "name": .name,
              "namespace": .namespace
            }
          }
        }
      }
  - name: createRestActions
    continueOnError: true
    errorKey: createRestActionsError
    dependsOn: 
      name: listPodsAndRestActions
      iterator: .listPodsAndRestActions.restActionsToCreate
    path: ${ "/apis/templates.krateo.io/v1/namespaces/" + (.namespace ) + "/restactions/" }
    verb: POST
    headers:
      - "Content-Type: application/json"
    payload: |
      ${
        {
          "kind": "RESTAction",
          "apiVersion": "templates.krateo.io/v1",
          "metadata": {
            "name": .name,
            "namespace": .namespace,
            "labels": {
              "krateo.io/portal": "restaction-for-table"
            }
          },
          "spec": {
            "api": [
              {
                "name": "text",
                "path": "/api/v1/namespaces/" + .namespace + "/pods/" + .name + "/log?tailLines=100",
                "verb": "GET",
                "endpointRef": {
                  "name": "admin-page-endpoint",
                  "namespace": "{{ .Release.Namespace }}"
                }
              }
            ]
          }
        }
      }
---
apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  name: admin-page-krateo-panel-row-2-logs-panel-table
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: namespaces
    path: "/api/v1/namespaces"
    filter: "[.namespaces.items[] | .metadata.name]"
    continueOnError: true
  - name: pods
    dependsOn:
      iterator: .[]
      name: namespaces
    path: ${ "/api/v1/namespaces/" + (.) + "/pods"}
    continueOnError: true
  - name: createAll
    path: "/call?apiVersion=templates.krateo.io/v1&resource=restactions&name=admin-page-krateo-panel-row-2-list-pods-and-create&namespace={{ .Release.Namespace }}"
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace: {{ .Release.Namespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: createAll
    exportJwt: true
    dependsOn: 
      name: namespaces
  filter: >
    {
      pods: (
        (
          if (.pods | type) == "array" then
            [.pods[]?.items[]?]
          elif (.pods | type) == "object" then
            [.pods.items[]?]
          else
            []
          end
        )
      ),
      list: (
        (
          if (.pods | type) == "array" then
            [.pods[]?.items[]?]
          elif (.pods | type) == "object" then
            [.pods.items[]?]
          else
            []
          end
        | map(
            [
              {
                valueKey: "name",
                kind: "jsonSchemaType",
                type: "string",
                stringValue: .metadata.name
              },
              {
                valueKey: "namespace",
                kind: "jsonSchemaType",
                type: "string",
                stringValue: .metadata.namespace
              },
              {
                valueKey: "status",
                kind: "jsonSchemaType",
                type: "string",
                stringValue: (
                  if (.status.conditions | type) == "array" then
                    ( [.status.conditions[]? | select(.type == "Ready") | "Ready: " + .status] | first? // "Status not available" )
                  else
                    "Status not available"
                  end
                )
              },
              {
                valueKey: "date",
                kind: "jsonSchemaType",
                type: "string",
                stringValue: .metadata.creationTimestamp
              },
              {
                valueKey: "logs",
                kind: "widget",
                resourceRefId: .metadata.name
              }
            ]
          )
        )
      )
    }
