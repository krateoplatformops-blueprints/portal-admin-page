apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  name: admin-page-compositions-panel-column-row-2-compositions-table
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: allNamespacesAndCrds
    path: "/call?apiVersion=templates.krateo.io%2Fv1&resource=restactions&name=compositions-get-ns-and-crd&namespace={{ .Release.Namespace }}"
    verb: GET
    endpointRef:
      name: snowplow-endpoint
      namespace: {{ .Release.Namespace }}
    headers:
    - 'Accept: application/json'
    continueOnError: true
    errorKey: allNamespacesAndCrdsError
    exportJwt: true
  - name: allCompositions
    dependsOn: 
      name: allNamespacesAndCrds
      iterator: ".allNamespacesAndCrds.status"
    path: ${ "/apis/composition.krateo.io/" + (.version) + "/namespaces/" + (.namespace) + "/" + (.plural) }
    verb: GET 
    continueOnError: true
    errorKey: allCompositionsError
  filter: >
    {
      list: (
        (
          if (.allCompositions | type) == "array" then
            [.allCompositions[]?.items[]?]
          elif (.allCompositions | type) == "object" then
            [.allCompositions.items[]?]
          else
            []
          end
        )
        | map(
            [
              {
                valueKey: "key",
                kind: "jsonSchemaType",
                type: "string",
                stringValue: .metadata.uid
              },
              {
                valueKey: "name",
                kind: "jsonSchemaType",
                type: "string",
                stringValue: .metadata.name
              },
              {
                valueKey: "namespace",
                kind: "jsonSchemaType",
                type: "string",
                stringValue: .metadata.namespace
              },
              {
                valueKey: "date",
                kind: "jsonSchemaType",
                type: "string",
                stringValue: .metadata.creationTimestamp
              },
              {
                valueKey: "status",
                kind: "jsonSchemaType",
                type: "string",
                stringValue: (
                  if (.status.conditions | type) == "array" then
                    ( [.status.conditions[]? | select(.type == "Ready") | "Ready: " + .status] | first? // "Status not available" )
                  else
                    "Status not available"
                  end
                )
              }
            ]
          )
        | sort_by(.[3].stringValue)  # sort by date cell
        | reverse
      )
    }
