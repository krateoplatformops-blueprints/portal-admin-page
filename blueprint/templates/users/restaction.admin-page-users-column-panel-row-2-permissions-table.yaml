apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  name: admin-page-users-column-panel-row-2-permissions-table
  namespace: {{ .Release.Namespace }}
spec:
  api:
  - name: namespaces
    path: "/api/v1/namespaces"
    filter: "[.namespaces.items[] | .metadata.name]"
    continueOnError: true
  - name: basic
    dependsOn:
      iterator: .[]
      name: namespaces
    path: ${ "/apis/basic.authn.krateo.io/v1alpha1/namespaces/" + (.) + "/users"}
    filter: "[.basic.items[] | .spec.groups[]] | unique"
    continueOnError: true
  - name: clusterrolebindings
    dependsOn:
      name: basic
    path: "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings"
  - name: clusterroles
    dependsOn:
      name: basic
    path: "/apis/rbac.authorization.k8s.io/v1/clusterroles"
  - name: rolebindings
    dependsOn:
      name: basic
    path: "/apis/rbac.authorization.k8s.io/v1/rolebindings"
  - name: roles
    dependsOn:
      name: basic
    path: "/apis/rbac.authorization.k8s.io/v1/roles"
  filter: >
    {
      "data":
      (
        (
          (
            (.clusterrolebindings.items // []) as $bindings |
            (.clusterroles.items // []) as $roles |
            [
              $bindings[] |
              select(.subjects) |
              .subjects[] as $subject |
              select($subject.kind == "Group") |
              {
                "groupName": $subject.name,
                "roleName": .roleRef.name,
                "scope": "Cluster"
              }
            ] |
            map(
              . as $binding |
              ($roles[] | select(.metadata.name == $binding.roleName)) as $role |
              ($role.rules // [])[] as $rule |
              {
                "groupName": $binding.groupName,
                "roleName": $binding.roleName,
                "scope": $binding.scope,
                "resources": (($rule.resources // ["*"]) | join(", ")),
                "verbs": (($rule.verbs // ["*"]) | join(", "))
              }
            )
          )
          +
          (
            (.rolebindings.items // []) as $bindings |
            (.roles.items // []) as $roles |
            [
              $bindings[] |
              select(.subjects) |
              .subjects[] as $subject |
              select($subject.kind == "Group") |
              {
                "groupName": $subject.name,
                "roleName": .roleRef.name,
                "scope": .metadata.namespace
              }
            ] |
            map(
              . as $binding |
              ($roles[] | select(.metadata.name == $binding.roleName and .metadata.namespace == $binding.scope)) as $role |
              ($role.rules // [])[] as $rule |
              {
                "groupName": $binding.groupName,
                "roleName": $binding.roleName,
                "scope": $binding.scope,
                "resources": (($rule.resources // ["*"]) | join(", ")),
                "verbs": (($rule.verbs // ["*"]) | join(", "))
              }
            )
          )
        )
        as $permissions
        |
        (
          ((.basic // []) | map({(.): true}) | add) as $lookup
          | $permissions
          | map(select($lookup[.groupName]))
          | unique
          | map([
              { "valueKey": "groupName", "kind": "jsonSchemaType", "type": "string", "stringValue": .groupName },
              { "valueKey": "roleName",  "kind": "jsonSchemaType", "type": "string", "stringValue": .roleName },
              { "valueKey": "scope",     "kind": "jsonSchemaType", "type": "string", "stringValue": .scope },
              { "valueKey": "resources", "kind": "jsonSchemaType", "type": "string", "stringValue": .resources },
              { "valueKey": "verbs",     "kind": "jsonSchemaType", "type": "string", "stringValue": .verbs }
            ])
        )
      )
    }

